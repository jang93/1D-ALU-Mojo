/*
   This file was generated automatically by the Mojo IDE version B1.2.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  wire [3-1:0] M_ctr_value;
  counter_2 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  localparam IDLE_state = 5'd0;
  localparam ADDERTEST1_state = 5'd1;
  localparam ADDERTEST1A_state = 5'd2;
  localparam ADDERTEST2A_state = 5'd3;
  localparam ADDERTEST2_state = 5'd4;
  localparam ADDERTEST3_state = 5'd5;
  localparam ADDERTEST4_state = 5'd6;
  localparam ADDERERRORTEST_state = 5'd7;
  localparam ADDERERROR_state = 5'd8;
  localparam BOOLEANTEST1_state = 5'd9;
  localparam BOOLEANTEST2_state = 5'd10;
  localparam BOOLEANTEST3_state = 5'd11;
  localparam BOOLEANTEST4_state = 5'd12;
  localparam BOOLEANERRORTEST_state = 5'd13;
  localparam BOOLEANERROR_state = 5'd14;
  localparam SHIFTTEST1_state = 5'd15;
  localparam SHIFTTEST2_state = 5'd16;
  localparam SHIFTTEST3_state = 5'd17;
  localparam SHIFTERRORTEST_state = 5'd18;
  localparam SHIFTERROR_state = 5'd19;
  localparam COMPTEST1_state = 5'd20;
  localparam COMPTEST2_state = 5'd21;
  localparam COMPTEST3_state = 5'd22;
  localparam COMPTEST4_state = 5'd23;
  localparam COMPTEST5_state = 5'd24;
  localparam COMPTEST6_state = 5'd25;
  localparam COMPTEST7_state = 5'd26;
  localparam COMPERRORTEST_state = 5'd27;
  localparam COMPERROR_state = 5'd28;
  localparam END_state = 5'd29;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  
  reg [5:0] alufn;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [7:0] alu;
  
  localparam X = 5'h1d;
  
  wire [1-1:0] M_alu1_overadd;
  wire [8-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  alu_3 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .overadd(M_alu1_overadd),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n)
  );
  
  wire [4-1:0] M_decimal3_out2;
  wire [4-1:0] M_decimal3_out1;
  wire [4-1:0] M_decimal3_out0;
  reg [8-1:0] M_decimal3_a;
  decimal3_4 decimal3 (
    .a(M_decimal3_a),
    .out2(M_decimal3_out2),
    .out1(M_decimal3_out1),
    .out0(M_decimal3_out0)
  );
  
  wire [7-1:0] M_sevenseg3_segs;
  reg [4-1:0] M_sevenseg3_char;
  seven_seg_5 sevenseg3 (
    .char(M_sevenseg3_char),
    .segs(M_sevenseg3_segs)
  );
  
  wire [7-1:0] M_sevenseg2_segs;
  reg [4-1:0] M_sevenseg2_char;
  seven_seg_5 sevenseg2 (
    .char(M_sevenseg2_char),
    .segs(M_sevenseg2_segs)
  );
  
  wire [7-1:0] M_sevenseg1_segs;
  reg [4-1:0] M_sevenseg1_char;
  seven_seg_5 sevenseg1 (
    .char(M_sevenseg1_char),
    .segs(M_sevenseg1_segs)
  );
  
  wire [7-1:0] M_sevenseg0_segs;
  reg [4-1:0] M_sevenseg0_char;
  seven_seg_5 sevenseg0 (
    .char(M_sevenseg0_char),
    .segs(M_sevenseg0_segs)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led[1+5-:6] = 6'h00;
    led[7+0-:1] = M_alu1_overadd;
    led[0+0-:1] = M_alu1_v;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a = io_dip[0+7-:8];
    b = io_dip[8+7-:8];
    alufn = io_dip[16+0+5-:6];
    M_alu1_alufn = alufn;
    M_alu1_a = a;
    M_alu1_b = b;
    alu = M_alu1_alu;
    io_led[16+7-:8] = alu;
    io_led[8+7-:8] = io_dip[8+7-:8];
    io_led[0+7-:8] = io_dip[0+7-:8];
    M_decimal3_a = alu;
    M_sevenseg3_char = M_decimal3_out2;
    M_sevenseg2_char = M_decimal3_out1;
    M_sevenseg1_char = M_decimal3_out0;
    M_sevenseg0_char = 4'hd;
    
    case (M_state_q)
      IDLE_state: begin
        M_counter_d = 1'h0;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = ADDERTEST1_state;
        end
      end
      ADDERTEST1_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h05;
        M_alu1_b = 8'h05;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = 8'h05;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h0a) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST1A_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h0a) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST1A_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h41;
        M_alu1_b = 8'h40;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h40;
        io_led[0+7-:8] = 8'h41;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h81) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST2_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h81) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST2A_state: begin
        M_alu1_alufn = 6'h01;
        M_alu1_a = 8'hb6;
        M_alu1_b = 8'h46;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h46;
        io_led[0+7-:8] = 8'hb6;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h70) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST3_state;
        end
      end
      ADDERTEST2_state: begin
        M_alu1_alufn = 6'h01;
        M_alu1_a = 8'h64;
        M_alu1_b = 8'h32;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h32;
        io_led[0+7-:8] = 8'h64;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h32) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST2A_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h32) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST3_state: begin
        M_alu1_alufn = 6'h02;
        M_alu1_a = 8'h05;
        M_alu1_b = 8'h08;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h08;
        io_led[0+7-:8] = 8'h05;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h28) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST4_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h28) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST4_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 8'h13;
        M_alu1_b = 8'h07;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h07;
        io_led[0+7-:8] = 8'h13;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h05) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERERRORTEST_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h05) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERERRORTEST_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h05;
        M_alu1_b = 8'h07;
        alu = M_alu1_alu + 1'h1;
        io_led[8+7-:8] = 8'h07;
        io_led[0+7-:8] = 8'h05;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h0c) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST1_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h0c) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERERROR_state: begin
        M_sevenseg3_char = 4'hc;
        M_sevenseg2_char = 4'he;
        M_sevenseg1_char = 4'he;
        M_sevenseg0_char = 4'ha;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST1_state;
        end
      end
      BOOLEANTEST1_state: begin
        M_alu1_alufn = 6'h18;
        M_alu1_a = 8'hb4;
        M_alu1_b = 8'hed;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'hed;
        io_led[0+7-:8] = 8'hb4;
        M_sevenseg0_char = 4'h8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'ha4) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST2_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'ha4) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST2_state: begin
        M_alu1_alufn = 6'h1e;
        M_alu1_a = 8'h8c;
        M_alu1_b = 8'h16;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h16;
        io_led[0+7-:8] = 8'h8c;
        M_sevenseg0_char = 4'h8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h9e) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h9e) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST3_state: begin
        M_alu1_alufn = 6'h16;
        M_alu1_a = 8'hf0;
        M_alu1_b = 8'h33;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h33;
        io_led[0+7-:8] = 8'hf0;
        M_sevenseg0_char = 4'h8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hc3) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST4_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hc3) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST4_state: begin
        M_alu1_alufn = 6'h1a;
        M_alu1_a = 8'hd4;
        M_alu1_b = 8'h33;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h33;
        io_led[0+7-:8] = 8'hd4;
        M_sevenseg0_char = 4'h8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hd4) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST1_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hd4) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANERRORTEST_state: begin
        M_alu1_alufn = 6'h18;
        M_alu1_a = 8'hd4;
        M_alu1_b = 8'h00;
        alu = M_alu1_alu + 1'h1;
        io_led[8+7-:8] = 8'h33;
        io_led[0+7-:8] = 8'h00;
        M_sevenseg0_char = 4'h8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST1_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANERROR_state: begin
        M_sevenseg3_char = 4'hc;
        M_sevenseg2_char = 4'he;
        M_sevenseg1_char = 4'he;
        M_sevenseg0_char = 4'h8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST1_state;
        end
      end
      SHIFTTEST1_state: begin
        M_alu1_alufn = 6'h20;
        M_alu1_a = 8'h0f;
        M_alu1_b = 8'h04;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h04;
        io_led[0+7-:8] = 8'h0f;
        M_sevenseg0_char = 3'h5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hf0) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hf0) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTTEST2_state: begin
        M_alu1_alufn = 6'h21;
        M_alu1_a = 8'hb0;
        M_alu1_b = 8'h02;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = 8'hb0;
        M_sevenseg0_char = 3'h5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h2c) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h2c) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTTEST3_state: begin
        M_alu1_alufn = 6'h23;
        M_alu1_a = 8'hb0;
        M_alu1_b = 8'h02;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = 8'hb0;
        M_sevenseg0_char = 3'h5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hec) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTERRORTEST_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hec) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTERRORTEST_state: begin
        M_alu1_alufn = 6'h21;
        M_alu1_a = 8'h68;
        M_alu1_b = 8'h02;
        alu = M_alu1_alu + 1'h1;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = 8'h68;
        M_sevenseg0_char = 3'h5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h1a) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTERRORTEST_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h1a) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTERROR_state: begin
        M_sevenseg3_char = 4'hc;
        M_sevenseg2_char = 4'he;
        M_sevenseg1_char = 4'he;
        M_sevenseg0_char = 3'h5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST1_state;
        end
      end
      COMPTEST1_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'hb4;
        M_alu1_b = 8'hb4;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'hb4;
        io_led[0+7-:8] = 8'hb4;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST2_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST2_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'hb4;
        M_alu1_b = 8'hb5;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'hb5;
        io_led[0+7-:8] = 8'hb4;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST3_state: begin
        M_alu1_alufn = 6'h35;
        M_alu1_a = 8'hb4;
        M_alu1_b = 8'hb5;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'hb5;
        io_led[0+7-:8] = 8'hb4;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST4_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST4_state: begin
        M_alu1_alufn = 6'h35;
        M_alu1_a = 8'h11;
        M_alu1_b = 8'h03;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h03;
        io_led[0+7-:8] = 8'h11;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST5_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST5_state: begin
        M_alu1_alufn = 6'h37;
        M_alu1_a = 8'h09;
        M_alu1_b = 8'h09;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h09;
        io_led[0+7-:8] = 8'h09;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST6_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST6_state: begin
        M_alu1_alufn = 6'h37;
        M_alu1_a = 8'h01;
        M_alu1_b = 8'h0d;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h0d;
        io_led[0+7-:8] = 8'h01;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST7_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST7_state: begin
        M_alu1_alufn = 6'h37;
        M_alu1_a = 8'h0f;
        M_alu1_b = 8'h0e;
        alu = M_alu1_alu;
        io_led[8+7-:8] = 8'h0e;
        io_led[0+7-:8] = 8'h0e;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMPERRORTEST_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPERRORTEST_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'h0f;
        M_alu1_b = 8'h0f;
        alu = M_alu1_alu + 1'h1;
        io_led[8+7-:8] = 8'h0f;
        io_led[0+7-:8] = 8'h0f;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPERROR_state: begin
        M_sevenseg3_char = 4'hc;
        M_sevenseg2_char = 4'he;
        M_sevenseg1_char = 4'he;
        M_sevenseg0_char = 4'hb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = END_state;
        end
      end
      END_state: begin
        M_sevenseg3_char = 4'hc;
        M_sevenseg2_char = 4'hf;
        M_sevenseg1_char = 1'h0;
        M_sevenseg0_char = 4'hd;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = IDLE_state;
        end
      end
    endcase
    
    case (M_ctr_value)
      1'h0: begin
        io_seg = ~M_sevenseg0_segs;
        io_sel = 4'he;
      end
      1'h1: begin
        io_seg = ~M_sevenseg1_segs;
        io_sel = 4'hd;
      end
      2'h2: begin
        io_seg = ~M_sevenseg2_segs;
        io_sel = 4'hb;
      end
      2'h3: begin
        io_seg = ~M_sevenseg3_segs;
        io_sel = 4'h7;
      end
      default: begin
        io_seg = ~M_sevenseg0_segs;
        io_sel = 4'he;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
